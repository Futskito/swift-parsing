{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/memberwise(_:)"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/UnicodeScalarViewToSubstring\/memberwise(_:)"},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/UnicodeScalarViewToSubstring","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/UnicodeScalarViewToSubstring\/Conversion-Implementations"]]},"abstract":[{"text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a","type":"text"},{"text":" ","type":"text"},{"text":"memberwise initializer.","type":"text"}],"metadata":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"roleHeading":"Type Method","symbolKind":"method","role":"symbol","extendedModule":"Parsing","externalID":"s:7Parsing10ConversionPAAE10memberwiseyAA11ConversionsO10MemberwiseVy_qd__qd_0_Gqd_0_qd__cAIRszr0_lFZ::SYNTHESIZED::s:7Parsing11ConversionsO28UnicodeScalarViewToSubstringV","title":"memberwise(_:)","modules":[{"name":"Parsing"}]},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"initializer","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Conversions","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing11ConversionsO"},{"text":".","kind":"text"},{"text":"Memberwise","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing11ConversionsO10MemberwiseV"},{"text":"<","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":">","kind":"text"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A memberwise initializer where ","type":"text"},{"code":"Values","type":"codeVoice"},{"text":" directly maps to the memory","type":"text"},{"text":" ","type":"text"},{"text":"layout of ","type":"text"},{"code":"Root","type":"codeVoice"},{"text":", for example the internal, default initializer that is automatically","type":"text"},{"text":" ","type":"text"},{"text":"synthesized for structs.","type":"text"}]}],"name":"initializer"}]},{"content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A conversion that can embed a tuple of values into a struct, and destructure a"},{"type":"text","text":" "},{"type":"text","text":"struct back into a tuple of values."}]}],"kind":"content"},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Useful for transforming the output of a "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","isActive":true},{"type":"text","text":" into a struct."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, given a simple "},{"type":"codeVoice","code":"Coordinate"},{"type":"text","text":" struct, we can build a parser-printer using"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/UnicodeScalarViewToSubstring\/memberwise(_:)","isActive":true},{"type":"text","text":":"}]},{"code":["struct Coordinate {","  var x: Double","  var y: Double","}","","let coord = ParsePrint(.memberwise(Coordinate.init(x:y:))) {","  \"(\"","  Double.parser()","  \",\"","  Double.parser()","  \")\"","}","","try coord.parse(\"(1,-2)\")           \/\/ Coordinate(x: 1.0, y: -2.0)","coord.print(.init(x: -5, y: 10))  \/\/ \"(-5.0,10.0)\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To transform the output of a "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","isActive":true},{"type":"text","text":" into an enum, see "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7","isActive":true},{"type":"text","text":"."}]},{"type":"heading","level":2,"text":"Careful usage","anchor":"Careful-usage"},{"type":"paragraph","inlineContent":[{"text":"This conversion works by using the memberwise initializer you supply to ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/UnicodeScalarViewToSubstring\/memberwise(_:)","isActive":true},{"text":" in","type":"text"},{"text":" ","type":"text"},{"text":"order to turn tuples into a struct, and it uses ","type":"text"},{"type":"codeVoice","code":"unsafeBitcast"},{"text":" to turn the struct back into","type":"text"},{"text":" ","type":"text"},{"text":"a tuple. Because of this, it is ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"text":" valid to use ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/UnicodeScalarViewToSubstring\/memberwise(_:)","isActive":true},{"text":" with anything other than","type":"text"},{"text":" ","type":"text"},{"text":"the default synthesized memberwise initializer that structs are given for free by the compiler","type":"text"},{"text":" ","type":"text"},{"text":"as that function most correctly maps the data inside a struct to its tuple representation,","type":"text"},{"text":" ","type":"text"},{"text":"even enforcing the order of the fields.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you alter the initializer in any way you run the risk of introducing subtle bugs into"},{"type":"text","text":" "},{"type":"text","text":"your parser-printer and potentially causing crashes."}]},{"type":"paragraph","inlineContent":[{"text":"For example, suppose we provided an alternative initializer to ","type":"text"},{"code":"Coordinate","type":"codeVoice"},{"text":" above that","type":"text"},{"text":" ","type":"text"},{"text":"allowed you to create a coordinate from a radius and angle measured in degrees:","type":"text"}]},{"code":["extension Coordinate {","  init(radius: Double, angle: Double) {","    self.x = radius * cos(angle * Double.pi \/ 180)","    self.y = radius * sin(angle * Double.pi \/ 180)","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This may seem innocent enough, but it is ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" safe to use this initializer with","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/UnicodeScalarViewToSubstring\/memberwise(_:)","isActive":true,"type":"reference"},{"text":". The following parser-printer will correctly parse a radius and angle into","type":"text"},{"text":" ","type":"text"},{"text":"an x\/y coordinate:","type":"text"}]},{"code":["let coord = ParserPrint(.memberwise(Coordinate.init(radius:angle:))) {","  Double.parser()","  \" @ \"","  Double.parser()","  \"°\"","}","","try coord.parse(\"1 @ 90°\")  \/\/ (x: 0, y: 1)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"However, printing a coordinate will ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"text":" convert it back into a radius and angle, and","type":"text"},{"text":" ","type":"text"},{"text":"instead will erroneously use (0, 1) as the radius and angle:","type":"text"}]},{"code":["try coord.print(.init(x: 0, y: 1))  \/\/ \"0 @ 1°\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means this parser-printer does not round trip (see "},{"type":"text","text":"doc:Roundtripping"},{"type":"text","text":"), "},{"type":"emphasis","inlineContent":[{"type":"text","text":"i.e."}]},{"type":"text","text":" if we"},{"type":"text","text":" "},{"type":"text","text":"parse and input and then print that output we do not get back the original input we started"},{"type":"text","text":" "},{"type":"text","text":"with:"}]},{"code":["try coord.print(try coord.parse(\"1 @ 90°\")) == \"1 @ 90°\"  \/\/ ❌"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, it is possible to provide a custom initializer for a type that either re-orders the"},{"type":"text","text":" "},{"type":"text","text":"fields or add\/removes fields, both of which will cause the underlying "},{"type":"codeVoice","code":"unsafeBitCast"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"crash. For example, we could have a "},{"type":"codeVoice","code":"User"},{"type":"text","text":" struct that holds onto a string for the bio and an"},{"type":"text","text":" "},{"type":"text","text":"integer for the id, and provide a custom initializer so that the id is provided first:"}]},{"code":["struct User {","  let bio: String","  let id: Int","  init(id: Int, bio: String) {","    self.bio = bio","    self.id = id","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, using this initializer with "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/UnicodeScalarViewToSubstring\/memberwise(_:)","isActive":true},{"type":"text","text":" will cause printing to crash because"},{"type":"text","text":" "},{"type":"text","text":"it will try to bitcast a "},{"type":"codeVoice","code":"(String, Int)"},{"type":"text","text":" struct into a "},{"type":"codeVoice","code":"(Int, String)"},{"type":"text","text":" tuple:"}]},{"code":["let user = ParsePrint(.memberwise(User.init(id:bio:))) {","  Int.parser()","  \",\"","  Rest()","}","","try user.print(.init(id: 42, bio: \"Hello world!\"))  \/\/ ❌"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/UnicodeScalarViewToSubstring/memberwise(_:)":{"title":"memberwise(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/UnicodeScalarViewToSubstring\/memberwise(_:)","url":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/memberwise(_:)","role":"symbol","abstract":[{"text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a","type":"text"},{"text":" ","type":"text"},{"text":"memberwise initializer.","type":"text"}],"kind":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/Memberwise":{"type":"topic","url":"\/documentation\/parsing\/conversions\/memberwise","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise","role":"symbol","abstract":[],"title":"Conversions.Memberwise","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Memberwise"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Memberwise"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","type":"topic","url":"\/documentation\/parsing","role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conversions"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Conversions"}],"abstract":[{"text":"A namespace for types that serve as conversions.","type":"text"}],"url":"\/documentation\/parsing\/conversions","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","title":"Conversions","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"type":"topic","title":"ParserPrinter","abstract":[],"role":"symbol","kind":"symbol","url":"\/documentation\/parsing\/parserprinter"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/case(_:)-4j2n7":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Converts the associated values of an enum case into the case, and an enum case into its"},{"type":"text","text":" "},{"type":"text","text":"associated values."}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"`case`"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Enum"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Enum"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7","title":"case(_:)","url":"\/documentation\/parsing\/conversion\/case(_:)-4j2n7"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/UnicodeScalarViewToSubstring/Conversion-Implementations":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/UnicodeScalarViewToSubstring\/Conversion-Implementations","role":"collectionGroup","kind":"article","abstract":[],"type":"topic","url":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring\/conversion-implementations","title":"Conversion Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/UnicodeScalarViewToSubstring":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnicodeScalarViewToSubstring"}],"abstract":[{"text":"A conversion from a unicode scalar view to its substring.","type":"text"}],"type":"topic","title":"Conversions.UnicodeScalarViewToSubstring","role":"symbol","url":"\/documentation\/parsing\/conversions\/unicodescalarviewtosubstring","navigatorTitle":[{"kind":"identifier","text":"UnicodeScalarViewToSubstring"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/UnicodeScalarViewToSubstring"}}}