{"seeAlsoSections":[{"generated":true,"title":"Articles","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Protocol","anchor":"Protocol","level":2},{"type":"paragraph","inlineContent":[{"text":"The design of the library is largely inspired by the Swift standard library and Apple’s Combine","type":"text"},{"text":" ","type":"text"},{"text":"framework. A parser is represented as a protocol that many types conform to, and then parser","type":"text"},{"text":" ","type":"text"},{"text":"transformations (also known as “combinators”) are methods that return concrete types conforming to","type":"text"},{"text":" ","type":"text"},{"text":"the parser protocol.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For example, to parse all the characters from the beginning of a substring until you encounter a"},{"type":"text","text":" "},{"type":"text","text":"comma you can use the "},{"type":"codeVoice","code":"Prefix"},{"type":"text","text":" parser:"}],"type":"paragraph"},{"code":["let parser = Prefix { $0 != \",\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello\"","input                     \/\/ \",World\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The type of this parser is:"}],"type":"paragraph"},{"code":["Prefix<Substring>"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"We can ","type":"text"},{"type":"codeVoice","code":".map"},{"text":" on this parser in order to transform its output, which in this case is the string","type":"text"},{"text":" ","type":"text"},{"text":"“Hello”:","type":"text"}],"type":"paragraph"},{"code":["let parser = Prefix { $0 != \",\" }",".map { $0 + \"!!!\" }","","var input = \"Hello,World\"[...]","try parser.parse(&input)  \/\/ \"Hello!!!\"","input                     \/\/ \",World\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The type of this parser is now:","type":"text"}],"type":"paragraph"},{"code":["Parsers.Map<Prefix<Substring>, Substring>"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Notice that the type of the parser encodes the operations that we performed. This adds a bit of","type":"text"},{"text":" ","type":"text"},{"text":"complexity when using these types, but comes with some performance benefits because Swift can","type":"text"},{"text":" ","type":"text"},{"text":"usually inline and optimize away the creation of those nested types.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Result Builders","type":"heading","anchor":"Result-Builders"},{"inlineContent":[{"text":"The library takes advantage of Swift’s ","type":"text"},{"type":"codeVoice","code":"@resultBuilder"},{"text":" feature to make constructing complex parsers","type":"text"},{"text":" ","type":"text"},{"text":"as fluent as possible, and should be reminiscent of how views are constructed in SwiftUI. The main","type":"text"},{"text":" ","type":"text"},{"text":"entry point into building a parser is the ","type":"text"},{"type":"codeVoice","code":"Parse"},{"text":" builder:","type":"text"}],"type":"paragraph"},{"code":["Parse {","","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In this builder block you can specify parsers that will be run one after another. For example, if"},{"type":"text","text":" "},{"type":"text","text":"you wanted to parse an integer, then a comma, and then a boolean from a string, you can simply do:"}],"type":"paragraph"},{"code":["Parse {","  Int.parser()","  \",\"","  Bool.parser()","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Note that the "},{"code":"String","type":"codeVoice"},{"type":"text","text":" type conforms to the "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"reference"},{"type":"text","text":" protocol, and represents a parser that"},{"type":"text","text":" "},{"type":"text","text":"consumes that exact string from the beginning of an input if it matches, and otherwise fails."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Many of the parsers and operators that come with the library are configured with parser builders"},{"type":"text","text":" "},{"type":"text","text":"to maximize readability of the parsers. For example, to parse accounting syntax of numbers, where"},{"type":"text","text":" "},{"type":"text","text":"parenthesized numbers are negative, we can use the "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","type":"reference"},{"type":"text","text":" parser builder:"}],"type":"paragraph"},{"code":["let accountingNumber = OneOf {","  Digits()","","  Parse {","    \"(\"; Digits(); \")\"","  }","  .map { -$0 }","}","","try accountingNumber.parse(\"100\")    \/\/ 100","try accountingNumber.parse(\"(100)\")  \/\/ -100"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Operators","type":"heading","anchor":"Operators"},{"inlineContent":[{"text":"Parser operators (also called “combinators”) are methods defined on the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"text":" protocol that","type":"text"},{"text":" ","type":"text"},{"text":"return a parser. For example, the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-4hsj5","type":"reference","isActive":true},{"text":" operator is a method that returns","type":"text"},{"text":" ","type":"text"},{"text":"something called a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map","type":"reference","isActive":true},{"text":":","type":"text"}],"type":"paragraph"},{"code":["extension Parser {","  public func map<NewOutput>(","    _ transform: @escaping (Output) -> NewOutput","  ) -> Parsers.Map<Self, NewOutput> {","    .init(upstream: self, transform: transform)","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"And "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map"},{"type":"text","text":" is a dedicated type that implements the logic of the map operation. In"},{"type":"text","text":" "},{"type":"text","text":"particular, in runs the upstream parser and then transforms its output:"}],"type":"paragraph"},{"code":["extension Parsers {","  public struct Map<Upstream: Parser, NewOutput>: Parser {","    public let upstream: Upstream","    public let transform: (Upstream.Output) -> NewOutput","","    public func parse(_ input: inout Upstream.Input) rethrows -> NewOutput {","      self.transform(try self.upstream.parse(&input))","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Types that conform to the "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"reference"},{"type":"text","text":" protocol but are not constructed directly, and instead are"},{"type":"text","text":" "},{"type":"text","text":"constructed via operators, are housed in the "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","type":"reference"},{"type":"text","text":" type. It’s just an empty enum that"},{"type":"text","text":" "},{"type":"text","text":"serves as a namespace for such parsers."}],"type":"paragraph"}]}],"kind":"article","identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"],["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}],"metadata":{"modules":[{"name":"Parsing"}],"title":"Design","role":"article","roleHeading":"Article"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","type":"topic","url":"\/documentation\/parsing","role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/map(_:)-4hsj5":{"title":"map(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Map","preciseIdentifier":"s:7Parsing7ParsersO3MapV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":">"}],"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-4hsj5","abstract":[{"text":"Returns a parser that transforms the output of this parser with a given closure.","type":"text"}],"url":"\/documentation\/parsing\/parser\/map(_:)-4hsj5"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"title":"Parser","type":"topic","url":"\/documentation\/parsing\/parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","kind":"symbol","abstract":[],"navigatorTitle":[{"text":"Parser","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"type":"topic","title":"String Abstractions","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"role":"article","url":"\/documentation\/parsing\/stringabstractions","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"type":"topic","title":"Getting Started","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"role":"article","url":"\/documentation\/parsing\/gettingstarted","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","url":"\/documentation\/parsing\/oneof","kind":"symbol","navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"type":"topic","title":"OneOf","abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"type":"topic","title":"Error Messages","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","abstract":[{"type":"text","text":"Learn how the library reports parsing errors and how to integrate your own custom error messages"},{"type":"text","text":" "},{"type":"text","text":"into parsers."}],"role":"article","url":"\/documentation\/parsing\/errormessages","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"title":"Parsers","type":"topic","url":"\/documentation\/parsing\/parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"symbol","abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"navigatorTitle":[{"text":"Parsers","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"abstract":[{"text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when","type":"text"},{"text":" ","type":"text"},{"text":"unnecessary.","type":"text"}],"title":"Backtracking","role":"article","type":"topic","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","url":"\/documentation\/parsing\/backtracking"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Map":{"abstract":[{"type":"text","text":"A parser that transforms the output of another parser with a given closure."}],"url":"\/documentation\/parsing\/parsers\/map","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Map","title":"Parsers.Map","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Map"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Map"}]}}}