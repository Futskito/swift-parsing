{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"topicSections":[{"title":"Articles","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"]},{"title":"Protocols","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection"]},{"title":"Structures","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint"]},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"]},{"title":"Enumerations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing"]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Additional-Resources","text":"Additional Resources"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing","type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/www.pointfree.co\/collections\/parsing","type":"reference","isActive":true}]}]}]},{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Parsing with this library is performed by listing out many small parsers that describe how to","type":"text"},{"text":" ","type":"text"},{"text":"incrementally consume small bits from the beginning of an input string. For example, suppose you","type":"text"},{"text":" ","type":"text"},{"text":"have a string that holds some user data that you want to parse into an array of ","type":"text"},{"code":"User","type":"codeVoice"},{"text":"s:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,true","\"\"\"","","struct User {","  var id: Int","  var name: String","  var isAdmin: Bool","}"]},{"type":"paragraph","inlineContent":[{"text":"A parser can be constructed for transforming the input string into an array of users in succinct","type":"text"},{"text":" ","type":"text"},{"text":"and fluent API:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let user = Parse(User.init) {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }.map(String.init)","  \",\"","  Bool.parser()","}","","let users = Many {","  user","} separator: {","  \"\\n\"","} terminator: {","  End()","}","","try users.parse(input)  \/\/ [User(id: 1, name: \"Blob\", isAdmin: true), ...]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This says that to parse a user we:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Parse and consume an integer from the beginning of the input","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"then a comma","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"then everything up to the next comma","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"then another comma"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"and finally a boolean."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And to parse an entire array of users we:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the "},{"code":"user","type":"codeVoice"},{"type":"text","text":" parser many times"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"between each invocation of "},{"code":"user","type":"codeVoice"},{"type":"text","text":" we run the separator parser to consume a newline"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"and once the "},{"type":"codeVoice","code":"user"},{"type":"text","text":" and separator parsers have consumed all they can we run the terminator"},{"type":"text","text":" "},{"type":"text","text":"parser to verify there is no more input to consume."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if the input is malformed, like say we mistyped one of the booleans, then the parser emits"},{"type":"text","text":" "},{"type":"text","text":"an error that describes exactly what went wrong:"}]},{"type":"codeListing","syntax":"swift","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,tru","\"\"\"","","try users.parse(input)","","\/\/ error: unexpected input","\/\/  --> input:3:11","\/\/ 3 | 3,Blob Jr,tru","\/\/   |           ^ expected \"true\" or \"false\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With a few small changes we can also turn this parser into a "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","isActive":true}]},{"type":"paragraph","inlineContent":[{"text":"Thatâ€™s the basics of parsing a simple string format, but there are a lot more operators and tricks","type":"text"},{"text":" ","type":"text"},{"text":"to learn in order to performantly parse larger inputs.","type":"text"}]}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"externalID":"Parsing","role":"collection","symbolKind":"module","title":"Parsing","roleHeading":"Framework","modules":[{"name":"Parsing"}]},"hierarchy":{"paths":[[]]},"kind":"symbol","abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"seeAlsoSections":[{"abstract":[{"text":"The collection of videos from ","type":"text"},{"isActive":true,"identifier":"https:\/\/www.pointfree.co","type":"reference"},{"text":" that dive deep into the","type":"text"},{"text":" ","type":"text"},{"text":"development of the Parsing library.","type":"text"}],"title":"Related Documentation","identifiers":["https:\/\/www.pointfree.co\/collections\/parsing"]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/CountingRange":{"title":"CountingRange","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"CountingRange","kind":"identifier"}],"url":"\/documentation\/parsing\/countingrange","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","abstract":[],"navigatorTitle":[{"text":"CountingRange","kind":"identifier"}],"kind":"symbol","type":"topic"},"https://github.com/pointfreeco/swift-parsing/discussions":{"title":"Discussions","type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","titleInlineContent":[{"type":"text","text":"Discussions"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional":{"type":"topic","role":"symbol","url":"\/documentation\/parsing\/conditional","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conditional","kind":"identifier"}],"navigatorTitle":[{"text":"Conditional","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional","title":"Conditional","abstract":[],"deprecated":true},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrependableCollection","kind":"identifier"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"PrependableCollection","kind":"identifier"}],"abstract":[],"title":"PrependableCollection","url":"\/documentation\/parsing\/prependablecollection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"type":"topic","title":"String Abstractions","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","abstract":[{"type":"text","text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to"},{"type":"text","text":" "},{"type":"text","text":"trade performance for correctness where needed."}],"role":"article","url":"\/documentation\/parsing\/stringabstractions","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"title":"ParserBuilder","type":"topic","url":"\/documentation\/parsing\/parserbuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserBuilder","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","kind":"symbol","abstract":[{"text":"A custom parameter attribute that constructs parsers from closures. The constructed parser","type":"text"},{"text":" ","type":"text"},{"text":"runs a number of parsers, one after the other, and accumulates their outputs.","type":"text"}],"navigatorTitle":[{"text":"ParserBuilder","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParsePrint":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint","url":"\/documentation\/parsing\/parseprint","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParsePrint","kind":"identifier"}],"title":"ParsePrint","type":"topic","abstract":[{"text":"An entry to ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","isActive":true},{"text":" syntax that requires the builder to be a printer.","type":"text"}],"navigatorTitle":[{"text":"ParsePrint","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"type":"topic","title":"Getting Started","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","abstract":[{"type":"text","text":"Learn how to integrate Parsing into your project and write your first parser."}],"role":"article","url":"\/documentation\/parsing\/gettingstarted","kind":"article"},"https://www.pointfree.co/collections/parsing":{"title":"Point-Free Videos","type":"link","identifier":"https:\/\/www.pointfree.co\/collections\/parsing","url":"https:\/\/www.pointfree.co\/collections\/parsing","titleInlineContent":[{"type":"text","text":"Point-Free Videos"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conversions"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Conversions"}],"abstract":[{"text":"A namespace for types that serve as conversions.","type":"text"}],"url":"\/documentation\/parsing\/conversions","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","title":"Conversions","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"type":"topic","title":"Design","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","abstract":[{"type":"text","text":"Learn how the library is designed, including its use of protocols, result builders and operators."}],"role":"article","url":"\/documentation\/parsing\/design","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"title":"Parser","type":"topic","url":"\/documentation\/parsing\/parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","kind":"symbol","abstract":[],"navigatorTitle":[{"text":"Parser","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"type":"topic","title":"Conversion","abstract":[],"role":"symbol","kind":"symbol","url":"\/documentation\/parsing\/conversion"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"type":"topic","title":"Error Messages","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","abstract":[{"type":"text","text":"Learn how the library reports parsing errors and how to integrate your own custom error messages"},{"type":"text","text":" "},{"type":"text","text":"into parsers."}],"role":"article","url":"\/documentation\/parsing\/errormessages","kind":"article"},"https://github.com/pointfreeco/swift-parsing":{"title":"GitHub Repo","type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing","url":"https:\/\/github.com\/pointfreeco\/swift-parsing","titleInlineContent":[{"type":"text","text":"GitHub Repo"}]},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParserPrinter":{"abstract":[{"text":"A type-erased parser-printer of ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" from ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":".","type":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/anyparserprinter","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyParserPrinter"}],"navigatorTitle":[{"kind":"identifier","text":"AnyParserPrinter"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter","title":"AnyParserPrinter","role":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","url":"\/documentation\/parsing\/anyconversion","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyConversion","kind":"identifier"}],"abstract":[{"type":"text","text":"A type-erased "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion"},{"type":"text","text":"."}],"navigatorTitle":[{"text":"AnyConversion","kind":"identifier"}],"title":"AnyConversion","kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"abstract":[{"text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when","type":"text"},{"text":" ","type":"text"},{"text":"unnecessary.","type":"text"}],"title":"Backtracking","role":"article","type":"topic","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","url":"\/documentation\/parsing\/backtracking"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"title":"Parsers","type":"topic","url":"\/documentation\/parsing\/parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"symbol","abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"navigatorTitle":[{"text":"Parsers","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"type":"topic","title":"ParserPrinter","abstract":[],"role":"symbol","kind":"symbol","url":"\/documentation\/parsing\/parserprinter"},"doc://co.pointfree.Parsing/documentation/Parsing":{"title":"Parsing","type":"topic","url":"\/documentation\/parsing","role":"collection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}]}}}